<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2 (Build 744U)" ts="2018-02-21 18:45:38">
<Class name="demo.Loan.BankEven.Context">
<Description>
This class is generated by the demo.Loan.BankEven BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankEven</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64555,41441.654548</TimeChanged>
<TimeCreated>64555,41428.169828</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="CreditRating">
<Type>%Integer</Type>
</Property>

<Property name="NameLength">
<Type>%Integer</Type>
</Property>

<Property name="PrimeRate">
<Type>%Numeric</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.PrimeRateRequest,callresponse:demo.Loan.Msg.PrimeRateResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.PrimeRate=callresponse.PrimeRate
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankEven.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.CreditRatingRequest,callresponse:demo.Loan.Msg.CreditRatingResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.CreditRating=callresponse.CreditRating
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankEven.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>NameLength</Value>
</Value>
<Value name="3">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankEven.Thread1">
<Description>
This class is generated by the demo.Loan.BankEven BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankEven</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64555,41441.765248</TimeChanged>
<TimeCreated>64555,41428.170182</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankEven","S1","received application for "_request.Name)
 Set status=$$$OK,context.NameLength=$Length(request.Name)
 If $$$ISERR(status) Quit
 Set iscTemp=$G(response)
 Set status=$classmethod("demo.Loan.BankEvenLoanAppTransform","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set response=iscTemp
 #; --- Begin Call PrimeRate ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.PrimeRateRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=..MakeAsyncCall("OnResponse1","demo.Loan.WebOperations",callrequest,"PrimeRate",1,0,"PrimeRate",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call PrimeRate ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("PrimeRate") Do ..%PendingResponses.SetAt("","PrimeRate")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call CreditRating ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.CreditRatingRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.TaxID=request.TaxID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","demo.Loan.WebOperations",callrequest,"CreditRating",1,0,"CreditRating",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call CreditRating ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("CreditRating") Do ..%PendingResponses.SetAt("","CreditRating")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.InterestRate=context.PrimeRate+1+(2*(1-(context.CreditRating/100)))
 If $$$ISERR(status) Quit
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankEven","S5","application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied"))
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.BankEven">
<Description>
Loan Approval Business Process for Bank Even.
Bank Even simulates a bank with unreliable service;
sometimes it responds quickly, other times not.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,50665.473</TimeCreated>

<XData name="BPL">
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='demo.Loan.Msg.Application' response='demo.Loan.Msg.Approval' height='2000' width='2000' >
<context>
<property name='CreditRating' type='%Integer' />
<property name='PrimeRate' type='%Numeric' />
<property name='NameLength' type='%Integer' />
</context>
<sequence xend='550' yend='900' >
<trace value='"received application for "_request.Name' xpos='550' ypos='200' />
<assign name='Count Name Length' property='context.NameLength' value='$Length(request.Name)' action='set' xpos='550' ypos='300' />
<transform name='Initialize from Loan App' class='demo.Loan.BankEvenLoanAppTransform' source='request' target='response' xpos='550' ypos='400' />
<call name='PrimeRate' target='demo.Loan.WebOperations' async='0' xpos='550' ypos='500' >
<annotation>Make a synchronous request for the Prime Rate.</annotation>
<request type='demo.Loan.Msg.PrimeRateRequest' />
<response type='demo.Loan.Msg.PrimeRateResponse' >
<assign property='context.PrimeRate' value='callresponse.PrimeRate' action='set' />
</response>
</call>
<call name='CreditRating' target='demo.Loan.WebOperations' async='0' xpos='550' ypos='600' >
<annotation>Make a synchronous request	for the Credit Rating.</annotation>
<request type='demo.Loan.Msg.CreditRatingRequest' >
<assign property='callrequest.TaxID' value='request.TaxID' action='set' />
</request>
<response type='demo.Loan.Msg.CreditRatingResponse' >
<assign property='context.CreditRating' value='callresponse.CreditRating' action='set' />
</response>
</call>
<assign name='InterestRate' property='response.InterestRate' value='context.PrimeRate+1+(2*(1-(context.CreditRating/100)))' action='set' xpos='550' ypos='700' >
<annotation>Copy InterestRate into the response object.</annotation>
</assign>
<trace value='"application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied")' xpos='550' ypos='800' />
</sequence>
</process>
]]></Data>
</XData>

<Property name="BankName">
<Type>%String</Type>
<InitialExpression>"Bank Even"</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>BankName</Default>
</Parameter>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>BankEvenDefaultData</DefaultData>
<Data name="BankEvenDefaultData">
<Structure>listnode</Structure>
<Subscript>"BankEven"</Subscript>
<Value name="1">
<Value>BankName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankEvenLoanAppTransform">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>60213,48389</TimeCreated>
<DependsOn>demo.Loan.Msg.Application,demo.Loan.Msg.Approval</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='demo.Loan.Msg.Application' targetClass='demo.Loan.Msg.Approval' create='new' language='objectscript' >
<assign value='process.BankName' property='target.BankName' action='set'  />
<assign value='(context.NameLength#2)=0' property='target.IsApproved' action='set'  />
</transform>
]]></Data>
</XData>
</Class>


<Class name="demo.Loan.BankManana.Context">
<Description>
This class is generated by the demo.Loan.BankManana BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankManana</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64555,41441.747905</TimeChanged>
<TimeCreated>64555,41428.24583</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="CreditRating">
<Type>%Integer</Type>
</Property>

<Property name="PrimeRate">
<Type>%Numeric</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.PrimeRateRequest,callresponse:demo.Loan.Msg.PrimeRateResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.PrimeRate=callresponse.PrimeRate
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankManana.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.CreditRatingRequest,callresponse:demo.Loan.Msg.CreditRatingResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.CreditRating=callresponse.CreditRating
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankManana.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankManana.Thread1">
<Description>
This class is generated by the demo.Loan.BankManana BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankManana</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64555,41441.838535</TimeChanged>
<TimeCreated>64555,41428.24607</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankManana","S1","received application for "_request.Name)
 Set status=$$$OK,response.BankName="BankManana"
 If $$$ISERR(status) Quit
 #; --- Begin Call PrimeRate ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.PrimeRateRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=..MakeAsyncCall("OnResponse1","demo.Loan.WebOperations",callrequest,"PrimeRate",1,0,"PrimeRate",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call PrimeRate ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("PrimeRate") Do ..%PendingResponses.SetAt("","PrimeRate")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call CreditRating ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.CreditRatingRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.TaxID=request.TaxID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","demo.Loan.WebOperations",callrequest,"CreditRating",1,0,"CreditRating",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call CreditRating ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("CreditRating") Do ..%PendingResponses.SetAt("","CreditRating")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.IsApproved=1
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.InterestRate=context.PrimeRate+1+(2*(1-(context.CreditRating/100)))
 If $$$ISERR(status) Quit
 Set %name="",%alarmhandle=""
 Set status=..%Process.MakeTimerCall("_Delay",.%name,"PT"_(2+($zcrc(request.Name,3)#7))_"S","",.%alarmhandle,"Delay",0)
 If $$$ISERR(status) Quit
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 For tI=1:1:$Length(%name,",") {
    If ..%Process.IsResponsePending($Piece(%name,",",tI)) Do ..%PendingResponses.SetAt("",$Piece(%name,",",tI))
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankManana","S7","application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied"))
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.BankManana">
<Description>
Loan Approval Business Process for Bank Manana.
Bank Manana simulates a bank with unreliable service;
sometimes it responds quickly, other times not.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,50665.473</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<XData name="BPL">
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process request="demo.Loan.Msg.Application" response="demo.Loan.Msg.Approval">

	<context>
		<property name="CreditRating" type="%Integer"/>
		<property name="PrimeRate" type="%Numeric"/>
	</context>

	<sequence>

	<trace value='"received application for "_request.Name'/>
	<assign name='Init Response' property="response.BankName" value='"BankManana"'>
	<annotation><![CDATA[Initialize the response object.]]]]><![CDATA[></annotation>
	</assign>

	<call name="PrimeRate" target="demo.Loan.WebOperations" async="0">
	<annotation><![CDATA[Make a synchronous request for the Prime Rate.]]]]><![CDATA[></annotation>
	<request type="demo.Loan.Msg.PrimeRateRequest">
	</request>
	<response type="demo.Loan.Msg.PrimeRateResponse">
	<assign property="context.PrimeRate" value="callresponse.PrimeRate"/>
	</response>
	</call>

	<call name="CreditRating" target="demo.Loan.WebOperations" async="0">
	<annotation><![CDATA[Make a synchronous request	for the Credit Rating.]]]]><![CDATA[></annotation>
	<request type="demo.Loan.Msg.CreditRatingRequest">
	<assign property="callrequest.TaxID" value='request.TaxID'/>
	</request>
	<response type="demo.Loan.Msg.CreditRatingResponse">
	<assign property="context.CreditRating" value="callresponse.CreditRating"/>
	</response>
	</call>

	<assign name='IsApproved' property="response.IsApproved" value="1">
		<annotation><![CDATA[Copy IsApproved into the response object.]]]]><![CDATA[></annotation>
	</assign>

	<assign name='InterestRate' property="response.InterestRate" value="context.PrimeRate+1+(2*(1-(context.CreditRating/100)))">	
		<annotation><![CDATA[Copy InterestRate into the response object.]]]]><![CDATA[></annotation>
	</assign>
	
	<delay name="Delay" duration="&quot;PT&quot;_(2+($zcrc(request.Name,3)#7))_&quot;S&quot;">
		<annotation><![CDATA[Wait for a random duration.
This simulates the poor service offered by this bank.]]]]><![CDATA[></annotation>
	</delay>
	
	<trace value='"application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied")'/>
	</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.BankMetrics">
<Description>
Business Metric Class for demo Loan Production</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessMetric</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>60423,56776</TimeCreated>

<Property name="LoansRequested">
<Description>
Total number of loan requests to date.</Description>
<Type>Ens.DataType.Metric</Type>
<Parameter name="RANGELOWER" value="0"/>
<Parameter name="RANGEUPPER" value="10000"/>
<Parameter name="UNITS" value="Applications"/>
</Property>

<Property name="LoansApproved">
<Description>
Total number of loans approved to date.</Description>
<Type>Ens.DataType.Metric</Type>
<Parameter name="RANGELOWER" value="0"/>
<Parameter name="RANGEUPPER" value="10000"/>
<Parameter name="UNITS" value="Applications"/>
</Property>

<Method name="OnCalculateMetrics">
<Description>
Calculate and update the set of metrics for this class</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Note: these calculations are not accurate, they 
	// are demonstrative.
	
	// set the values of our metrics
	&sql(SELECT COUNT(*) INTO :count
		 FROM demo_Loan_Msg.Application)

	Set ..LoansRequested = count
	
	// set the values of our metrics
	&sql(SELECT COUNT(*) INTO :count 
		 FROM demo_Loan_Msg.Approval
		 WHERE IsApproved = 1)

	Set ..LoansApproved = count

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.BankSoprano.Context">
<Description>
This class is generated by the demo.Loan.BankSoprano BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankSoprano</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64555,41441.896318</TimeChanged>
<TimeCreated>64555,41428.596958</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="CreditRating">
<Type>%Integer</Type>
</Property>

<Property name="PrimeRate">
<Type>%Numeric</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.PrimeRateRequest,callresponse:demo.Loan.Msg.PrimeRateResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.PrimeRate=callresponse.PrimeRate
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankSoprano.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to demo.Loan.WebOperations</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:demo.Loan.Msg.Approval,callrequest:demo.Loan.Msg.CreditRatingRequest,callresponse:demo.Loan.Msg.CreditRatingResponse,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.CreditRating=callresponse.CreditRating
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.BankSoprano.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankSoprano.Thread1">
<Description>
This class is generated by the demo.Loan.BankSoprano BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.BankSoprano</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64555,41441.959986</TimeChanged>
<TimeCreated>64555,41428.59723</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankSoprano","S1","received application for "_request.Name)
 Set status=$$$OK,response.BankName="BankSoprano"
 If $$$ISERR(status) Quit
 #; --- Begin Call PrimeRate ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.PrimeRateRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=..MakeAsyncCall("OnResponse1","demo.Loan.WebOperations",callrequest,"PrimeRate",1,0,"PrimeRate",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call PrimeRate ---
 #; --- Begin Call CreditRating ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.CreditRatingRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.TaxID=request.TaxID
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","demo.Loan.WebOperations",callrequest,"CreditRating",1,0,"CreditRating",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call CreditRating ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("PrimeRate") Do ..%PendingResponses.SetAt("","PrimeRate")
 If ..%Process.IsResponsePending("CreditRating") Do ..%PendingResponses.SetAt("","CreditRating")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,10,"PrimeRate,CreditRating",.%alarmhandle,"Wait")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (context.PrimeRate="") {
 Set ..%NextState="S5"
 } elseif (context.CreditRating="") {
 Set ..%NextState="S6"
 } else {
 Set ..%NextState="S7"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set %name="",%alarmhandle=""
 Set status=..%Process.MakeTimerCall("_Delay",.%name,"PT"_(2+($zcrc(request.Name,4)#5))_"S","",.%alarmhandle,"Delay",0)
 If $$$ISERR(status) Quit
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 For tI=1:1:$Length(%name,",") {
    If ..%Process.IsResponsePending($Piece(%name,",",tI)) Do ..%PendingResponses.SetAt("",$Piece(%name,",",tI))
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.IsApproved=0
 If $$$ISERR(status) Quit
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.IsApproved=0
 If $$$ISERR(status) Quit
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.IsApproved=1
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.InterestRate=context.PrimeRate+10+(99*(1-(context.CreditRating/100)))
 If $$$ISERR(status) Quit
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.BankSoprano","S9","application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied"))
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.BankSoprano">
<Description>
Loan Approval Business Process for Bank Soprano.
Bank Soprano simulates a bank with great service but
somewhat high interest rates.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,50665.473</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<XData name="BPL">
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process request="demo.Loan.Msg.Application" response="demo.Loan.Msg.Approval">
	
	<context>
		<property name="CreditRating" type="%Integer"/>
		<property name="PrimeRate" type="%Numeric"/>
	</context>
	
	<sequence>

	<trace value='"received application for "_request.Name'/>
	
	<assign name='Init Response' property="response.BankName" value='"BankSoprano"'>
	<annotation><![CDATA[Initialize the response object.]]]]><![CDATA[></annotation>
	</assign>
	
	<call name="PrimeRate" target="demo.Loan.WebOperations" async="1">
	<annotation><![CDATA[Send an asynchronous request for the Prime Rate.]]]]><![CDATA[></annotation>
	<request type="demo.Loan.Msg.PrimeRateRequest"/>
	<response type="demo.Loan.Msg.PrimeRateResponse">
	<assign property="context.PrimeRate" value="callresponse.PrimeRate"/>
	</response>
	</call>

	<call name="CreditRating" target="demo.Loan.WebOperations" async="1">
	<annotation><![CDATA[Send an asynchronous request for the Credit Rating.]]]]><![CDATA[></annotation>
	<request type="demo.Loan.Msg.CreditRatingRequest">
	<assign property="callrequest.TaxID" value='request.TaxID'/>
	</request>
	<response type="demo.Loan.Msg.CreditRatingResponse">
	<assign property="context.CreditRating" value="callresponse.CreditRating"/>
	</response>
	</call>

	<sync name='Wait' calls="PrimeRate,CreditRating" type="all" timeout="10">
	<annotation><![CDATA[Wait for the response from the async requests.
Wait for up to 10 seconds.]]]]><![CDATA[></annotation>
	</sync>

	<switch name='Approved?'>
	<case name='No PrimeRate' condition='context.PrimeRate=""'>
		<assign name='Not Approved' property="response.IsApproved" value="0"/>
	</case>
	<case name='No Credit' condition='context.CreditRating=""'>
		<assign name='Not Approved' property="response.IsApproved" value="0"/>
	</case>
	<default name='Approved' >
	<assign name='Approved' property="response.IsApproved" value="1"/>
	<assign name='InterestRate' property="response.InterestRate" value="context.PrimeRate+10+(99*(1-(context.CreditRating/100)))">
		<annotation><![CDATA[Copy InterestRate into response object.]]]]><![CDATA[></annotation>
	</assign>
	</default>
	</switch>

	<delay name='Delay' duration="&quot;PT&quot;_(2+($zcrc(request.Name,4)#5))_&quot;S&quot;">
		<annotation><![CDATA[Wait for a random duration.]]]]><![CDATA[></annotation>
	</delay>
	
	<trace value='"application is "_$s(response.IsApproved:"approved for "_response.InterestRate_"%",1:"denied")'/>

	</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>BankSopranoDefaultData</DefaultData>
<Data name="BankSopranoDefaultData">
<Subscript>"BankSoprano"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankUS">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,50665.473</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Property name="CreditRating">
<Type>%Integer</Type>
</Property>

<Property name="PrimeRate">
<Type>%Numeric</Type>
</Property>

<Method name="OnRequest">
<FormalSpec>request:demo.Loan.Msg.Application,*response:demo.Loan.Msg.Approval</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$TRACE("received application for "_request.Name)
		#;
		If $zcrc(request.Name,2)#5=0 {
			Set response = ##class(demo.Loan.Msg.Approval).%New()
			Set response.BankName = "BankUS"
			Set response.IsApproved = 0
			$$$TRACE("application is denied because of bank holiday")
			Quit
		}
		#;
		Set tRequest = ##class(demo.Loan.Msg.PrimeRateRequest).%New()
		Set tSC = ..SendRequestAsync("demo.Loan.WebOperations",tRequest,1,"PrimeRate")
		#;
		Set tRequest = ##class(demo.Loan.Msg.CreditRatingRequest).%New()
		Set tRequest.TaxID = request.TaxID
		Set tSC = ..SendRequestAsync("demo.Loan.WebOperations",tRequest,1,"CreditRating")
		#;
		Set tSC = ..SetTimer("PT15S")
		#;
		Quit
	} While (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse">
<Description>
Handle a 'Response'</Description>
<FormalSpec><![CDATA[request:Ens.Request,&response:Ens.Response,callrequest:Ens.Request,callresponse:Ens.Response,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		If pCompletionKey="PrimeRate" {
			Set ..PrimeRate = callresponse.PrimeRate
		} Elseif pCompletionKey="CreditRating" {
			Set ..CreditRating = callresponse.CreditRating
		}
		Quit
	} While (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError Goto Exit
]]></Implementation>
</Method>

<Method name="OnComplete">
<FormalSpec><![CDATA[request:Ens.Request,&response:Ens.Response]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		Set response = ##class(demo.Loan.Msg.Approval).%New()
		Set response.BankName = "BankUS"
		Set tIsUsCitizen=($zcvt($tr(request.Nationality,"."),"u")="USA")||($zcvt($tr(request.Nationality,"."),"u")="US")
		If ('tIsUsCitizen)||(..CreditRating<50) {
			Set response.IsApproved = 0
			$$$TRACE("application is denied")
		} Else {
			Set response.IsApproved = 1
			Set response.InterestRate = ..PrimeRate+2+(5*(1-(..CreditRating/100)))
			$$$TRACE("application is approved for "_response.InterestRate_"%")
		}
		Quit
	} While (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>BankUSDefaultData</DefaultData>
<Data name="BankUSDefaultData">
<Structure>listnode</Structure>
<Subscript>"BankUS"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.BankUSProduction">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59312,56897.326</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="demo.Loan.BankUSProduction" TestingEnabled="true">
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="demo.Loan.BankUSTerminalService" ClassName="demo.Loan.BankUSTerminalService" PoolSize="0" Enabled="true" Foreground="false" InactivityTimeout="0">
  </Item>
  <Item Name="demo.Loan.WebOperations" ClassName="demo.Loan.WebOperations" PoolSize="1" Enabled="true" Foreground="false" InactivityTimeout="0">
  </Item>
  <Item Name="demo.Loan.BankUS" ClassName="demo.Loan.BankUS" PoolSize="1" Enabled="true" Foreground="false" InactivityTimeout="0">
  </Item>
</Production>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do ..Start()
	;
	Set tSC=##class(Ens.Director).CreateBusinessService("demo.Loan.BankUSTerminalService",.tBusinessService)
	If $$$ISERR(tSC) Do $system.OBJ.DisplayError(tSC) Quit
	For {
		Read !,"amount:name:taxid:nationality>",tInput,! Quit:tInput=""
		Set tSC=tBusinessService.ProcessInput(##class(Ens.StringContainer).%New(tInput),.tOutput)
		If 'tSC Do $system.Status.DisplayError(tSC) Continue
		Write !,tOutput.StringValue
	}
	Set tBusinessService = $$$NULLOREF
	;
	Do ..Stop()
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.BankUSTerminalService">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59276,57717.364</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.StringContainer,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; assuming the first line is 'amount:name:TaxID:nationality'
	Set tSubject=pInput.StringValue

	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tSC=..SendRequestSync("demo.Loan.BankUS",tApplication,.tApproval)  Quit:$$$ISERR(tSC) tSC

	Set pOutput=##class(Ens.StringContainer).%New(tApproval.GetText())
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.Dashboard">
<Description>
Business Activity Dashboard for demo.Loan application.</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Dashboard</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>60423,56776</TimeCreated>

<XData name="Dashboard">
<Data><![CDATA[
<Dashboard RefreshRate="2000" Metric="demo.Loan.BankMetrics">
<Speedometer Label="Requests" Property="LoansRequested" />
<Speedometer Label="Approvals" Property="LoansApproved" />
</Dashboard>
]]></Data>
</XData>
</Class>


<Class name="demo.Loan.FindRateCSPService">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59278,43007.285</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pCSPRequest:%CSP.Request,pOutput:Ens.StringContainer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount = pCSPRequest.Get("Amount")
	Set tApplication.Name = pCSPRequest.Get("Name")
	Set tApplication.TaxID = pCSPRequest.Get("TaxID")
	Set tApplication.Nationality = pCSPRequest.Get("Nationality")
	Set tApplication.BusinessOperationType = "mail"
	Set tApplication.Destination = pCSPRequest.Get("EMail")
	Set tSC = ..SendRequestAsync("demo.Loan.FindRateDecisionProcessBPL",tApplication)  Quit:$$$ISERR(tSC) tSC

	Set pOutput = ##class(Ens.StringContainer).%New(tApplication.GetRecordNumberText(1))
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateDecisionProcessBPL.Context">
<Description>
This class is generated by the demo.Loan.FindRateDecisionProcessBPL BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.FindRateDecisionProcessBPL</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>64555,41442.091734</TimeChanged>
<TimeCreated>64555,41430.075273</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="BankName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="InterestRate">
<Type>%Numeric</Type>
</Property>

<Property name="IsApproved">
<Type>%Boolean</Type>
</Property>

<Property name="Iterator">
<Type>%String</Type>
</Property>

<Property name="TheResults">
<Type>demo.Loan.Msg.Approval</Type>
<Collection>list</Collection>
</Property>

<Property name="ThisResult">
<Type>demo.Loan.Msg.Approval</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to demo.Loan.BankUS</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:,callrequest:demo.Loan.Msg.Application,callresponse:demo.Loan.Msg.Approval,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=context.TheResults.Insert(callresponse)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.FindRateDecisionProcessBPL.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse2">
<Description>
Response Handler for call to demo.Loan.BankSoprano</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:,callrequest:demo.Loan.Msg.Application,callresponse:demo.Loan.Msg.Approval,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=context.TheResults.Insert(callresponse)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.FindRateDecisionProcessBPL.Thread1","OnResponse2")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse3">
<Description>
Response Handler for call to demo.Loan.BankManana</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:,callrequest:demo.Loan.Msg.Application,callresponse:demo.Loan.Msg.Approval,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=context.TheResults.Insert(callresponse)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.FindRateDecisionProcessBPL.Thread1","OnResponse3")
 Goto Exit
]]></Implementation>
</Method>

<Method name="OnResponse4">
<Description>
Response Handler for call to demo.Loan.BankEven</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:demo.Loan.Msg.Application,response:,callrequest:demo.Loan.Msg.Application,callresponse:demo.Loan.Msg.Approval,callname:%String</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=context.TheResults.Insert(callresponse)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("demo.Loan.FindRateDecisionProcessBPL.Thread1","OnResponse4")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>BankName</Value>
</Value>
<Value name="2">
<Value>InterestRate</Value>
</Value>
<Value name="3">
<Value>IsApproved</Value>
</Value>
<Value name="4">
<Value>Iterator</Value>
</Value>
<Value name="5">
<Value>TheResults</Value>
</Value>
<Value name="6">
<Value>ThisResult</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.FindRateDecisionProcessBPL.Thread1">
<Description>
This class is generated by the demo.Loan.FindRateDecisionProcessBPL BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>demo.Loan.FindRateDecisionProcessBPL</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>64555,41442.0643</TimeChanged>
<TimeCreated>64555,41430.075704</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.FindRateDecisionProcessBPL","S1","received application for "_request.Name)
 #; --- Begin Call BankUS ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","demo.Loan.BankUS",callrequest,"BankUS",1,0,"BankUS",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankUS ---
 #; --- Begin Call BankSoprano ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","demo.Loan.BankSoprano",callrequest,"BankSoprano",1,0,"BankSoprano",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankSoprano ---
 #; --- Begin Call BankManana ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","demo.Loan.BankManana",callrequest,"BankManana",1,0,"BankManana",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankManana ---
 #; --- Begin Call BankEven ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse4","demo.Loan.BankEven",callrequest,"BankEven",1,0,"BankEven",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankEven ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("BankUS") Do ..%PendingResponses.SetAt("","BankUS")
 If ..%Process.IsResponsePending("BankSoprano") Do ..%PendingResponses.SetAt("","BankSoprano")
 If ..%Process.IsResponsePending("BankManana") Do ..%PendingResponses.SetAt("","BankManana")
 If ..%Process.IsResponsePending("BankEven") Do ..%PendingResponses.SetAt("","BankEven")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,5,"BankUS,BankSoprano,BankManana,BankEven",.%alarmhandle,"Wait for Banks")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait for Banks"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S10">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.BankName=context.ThisResult.BankName
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.IsApproved=context.ThisResult.IsApproved
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.InterestRate=context.ThisResult.InterestRate
 If $$$ISERR(status) Quit
 Set ..%NextState="S9"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
]]></Implementation>
</Method>

<Method name="S11">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.FindRateDecisionProcessBPL","S11","application is "_$s(context.IsApproved:"approved for "_context.InterestRate_"% by "_context.BankName,1:"denied"))
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
]]></Implementation>
</Method>

<Method name="S12">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","demo.Loan.FindRateEMailOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
]]></Implementation>
</Method>

<Method name="S13">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","demo.Loan.FindRateFileOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
]]></Implementation>
</Method>

<Method name="S14">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","My Terminal Output",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
]]></Implementation>
</Method>

<Method name="S15">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","demo.Loan.FindRateTCPOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S15") Goto Exit
]]></Implementation>
</Method>

<Method name="S16">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","demo.Loan.FindRateMSMQOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S16") Goto Exit
]]></Implementation>
</Method>

<Method name="S17">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","demo.Loan.FindRateMQSeriesOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S17") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.FindRateDecisionProcessBPL","S3","sync complete")
 Set context.Iterator="",..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set context.Iterator=context.TheResults.Next(context.Iterator)
 If context.Iterator="" {
  Set ..%NextState="S6"
 } else {
  Set ..%NextState="S5"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ThisResult=context.TheResults.GetAt(context.Iterator)
 If $$$ISERR(status) Quit
 Do ##class(Ens.Util.Trace).WriteTrace("user","demo.Loan.FindRateDecisionProcessBPL","S5","processing reply from "_context.ThisResult.BankName)
 If (context.ThisResult.IsApproved) {
 Set ..%NextState="S8"
 } else {
 Set ..%NextState="S7"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (request.BusinessOperationType="mail") {
 Set ..%NextState="S12"
 } elseif (request.BusinessOperationType="file") {
 Set ..%NextState="S13"
 } elseif (request.BusinessOperationType="term") {
 Set ..%NextState="S14"
 } elseif (request.BusinessOperationType="tcp") {
 Set ..%NextState="S15"
 } elseif (request.BusinessOperationType="msmq") {
 Set ..%NextState="S16"
 } elseif (request.BusinessOperationType="mqseries") {
 Set ..%NextState="S17"
 } else {
 Set ..%NextState="S11"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If (('context.IsApproved)||(context.InterestRate>context.ThisResult.InterestRate)) {
 Set ..%NextState="S10"
 } else {
 Set ..%NextState="S9"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>cache</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S7"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.FindRateDecisionProcessBPL">
<Description>
Loan Approval Business Process for Find Rate.
This process passes on a Loan Application to 
3 other bank and finds the best available rate.</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,50665.473</TimeCreated>

<Parameter name="DOMAIN">
<Default>Ensdemo</Default>
</Parameter>

<XData name="BPL">
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='demo.Loan.Msg.Application' height='2000' width='2635' >
<context>
<property name='BankName' type='%String' ><parameters><parameter name='MAXLEN' value=''/></parameters></property>
<property name='IsApproved' type='%Boolean' />
<property name='InterestRate' type='%Numeric' />
<property name='TheResults' type='demo.Loan.Msg.Approval' collection='list' />
<property name='Iterator' type='%String' />
<property name='ThisResult' type='demo.Loan.Msg.Approval' />
</context>
<sequence xend='550' yend='1450' >
<trace value='"received application for "_request.Name' xpos='550' ypos='200' />
<call name='BankUS' target='demo.Loan.BankUS' async='1' xpos='550' ypos='300' >
<annotation>Send an asynchronous request to Bank US.</annotation>
<request type='demo.Loan.Msg.Application' >
<assign property='callrequest' value='request' action='set' />
</request>
<response type='demo.Loan.Msg.Approval' >
<assign property='context.TheResults' value='callresponse' action='append' />
</response>
</call>
<call name='BankSoprano' target='demo.Loan.BankSoprano' async='1' xpos='550' ypos='400' >
<annotation>Send an asynchronous request to Bank Soprano.</annotation>
<request type='demo.Loan.Msg.Application' >
<assign property='callrequest' value='request' action='set' />
</request>
<response type='demo.Loan.Msg.Approval' >
<assign property='context.TheResults' value='callresponse' action='append' />
</response>
</call>
<call name='BankManana' target='demo.Loan.BankManana' async='1' xpos='550' ypos='500' >
<annotation>Send an asynchronous request to Bank Manana.</annotation>
<request type='demo.Loan.Msg.Application' >
<assign property='callrequest' value='request' action='set' />
</request>
<response type='demo.Loan.Msg.Approval' >
<assign property='context.TheResults' value='callresponse' action='append' />
</response>
</call>
<call name='BankEven' target='demo.Loan.BankEven' async='1' xpos='550' ypos='600' >
<annotation>Send an asynchronous request to Bank Even.</annotation>
<request type='demo.Loan.Msg.Application' >
<assign property='callrequest' value='request' action='set' />
</request>
<response type='demo.Loan.Msg.Approval' >
<assign property='context.TheResults' value='callresponse' action='append' />
</response>
</call>
<sync name='Wait for Banks' calls='BankUS,BankSoprano,BankManana,BankEven' timeout='5' type='all' xpos='550' ypos='700' >
<annotation>Wait for the response from the banks. Wait for up to 5 seconds.</annotation>
</sync>
<trace value='"sync complete"' xpos='550' ypos='800' />
<foreach name='Loop through Results' property='context.TheResults' key='context.Iterator' xpos='550' ypos='900' xend='550' yend='1200' >
<annotation>Loop over the results received from the banks.
Drill into this shape to see the details of the loop.
</annotation>
<assign name='ThisResult' property='context.ThisResult' value='context.TheResults.GetAt(context.Iterator)' action='set' xpos='550' ypos='200' />
<trace value='"processing reply from "_context.ThisResult.BankName' xpos='550' ypos='300' />
<if name='Approved?' condition='context.ThisResult.IsApproved' xpos='550' ypos='400' xend='550' yend='1100' >
<annotation>Were we approved by this bank?</annotation>
<true>
<if name='BetterRate?' condition='(&apos;context.IsApproved)||(context.InterestRate&gt;context.ThisResult.InterestRate)' xpos='685' ypos='550' xend='685' yend='1000' >
<annotation>Is this a better rate?
Compare rate with current best rate.</annotation>
<true>
<assign name='BankName' property='context.BankName' value='context.ThisResult.BankName' action='set' xpos='820' ypos='700' >
<annotation>This is the best rate so far;
Copy the details into the context object.</annotation>
</assign>
<assign name='IsApproved' property='context.IsApproved' value='context.ThisResult.IsApproved' action='set' xpos='820' ypos='800' />
<assign name='InterestRate' property='context.InterestRate' value='context.ThisResult.InterestRate' action='set' xpos='820' ypos='900' />
</true>
</if>
</true>
</if>
</foreach>
<switch name='Response' xpos='550' ypos='1000' xend='550' yend='1250' >
<annotation>Determine which type of response was requested.</annotation>
<case condition='request.BusinessOperationType="mail"' name='Mail' >
<call name='SendApproval' target='demo.Loan.FindRateEMailOperation' async='1' xpos='685' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<case condition='request.BusinessOperationType="file"' name='File' >
<call name='SendApproval' target='demo.Loan.FindRateFileOperation' async='1' xpos='955' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<case condition='request.BusinessOperationType="term"' name='Terminal' >
<call name='SendApproval' target='My Terminal Output' async='1' xpos='1225' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<case condition='request.BusinessOperationType="tcp"' name='TCP' >
<call name='SendApproval' target='demo.Loan.FindRateTCPOperation' async='1' xpos='1495' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<case condition='request.BusinessOperationType="msmq"' name='MSMQ' >
<call name='SendApproval' target='demo.Loan.FindRateMSMQOperation' async='1' xpos='1765' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<case condition='request.BusinessOperationType="mqseries"' name='MQSeries' >
<call name='SendApproval' target='demo.Loan.FindRateMQSeriesOperation' async='1' xpos='2035' ypos='1150' >
<request type='demo.Loan.Msg.SendReply' >
<assign property='callrequest.Text' value='process.GetText(context)' action='set' />
<assign property='callrequest.Destination' value='request.Destination' action='set' />
</request>
</call>
</case>
<default/>
</switch>
<trace value='"application is "_$s(context.IsApproved:"approved for "_context.InterestRate_"% by "_context.BankName,1:"denied")' xpos='550' ypos='1350' />
</sequence>
</process>
]]></Data>
</XData>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Method name="GetText">
<FormalSpec>context:Ens.BP.Context</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSessionId=..%SessionId
	&sql(Select MessageBodyId into :tRecordNum from Ens.MessageHeader where ID=:tSessionId)
	If $Get(tRecordNum)="" set tRecordNum ="??"
	
	If context.IsApproved {
		Set tText = $$FormatMessage^%occMessages(,"Ensdemo","FindRateContext1","Your loan application with record number %1 was approved.",tRecordNum)_$c(13,10)
		Set tText = tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateContext2","The lowest interest rate available is at %1 percent offered by %2.",context.InterestRate,context.BankName)_$c(13,10)
	} Else {
		Set tText = $$FormatMessage^%occMessages(,"Ensdemo","FindRateIsDenied","Your loan application was denied.",tRecordNum)_$c(13,10)
	}
	Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateThankyou","Thank you for applying with FindRate.")_$c(13,10)
	Quit $ZCVT(tText,"O","HTML")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.FindRateDecisionProcessCustom">
<ClassType>persistent</ClassType>
<IncludeCode>EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,34681.193</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Property name="BankName">
<Type>%String</Type>
</Property>

<Property name="IsApproved">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="InterestRate">
<Type>%Numeric</Type>
</Property>

<Method name="OnRequest">
<FormalSpec>request:demo.Loan.Msg.Application,*response:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("received application for "_request.Name)
	#;
	Set tSC = ..SendRequestAsync("demo.Loan.BankUS",request)  Quit:$$$ISERR(tSC) tSC
	Set tSC = ..SendRequestAsync("demo.Loan.BankSoprano",request)  Quit:$$$ISERR(tSC) tSC
	Set tSC = ..SendRequestAsync("demo.Loan.BankManana",request)  Quit:$$$ISERR(tSC) tSC
	#;
	Quit ..SetTimer("PT5S")
]]></Implementation>
</Method>

<Method name="OnResponse">
<FormalSpec><![CDATA[request:demo.Loan.Msg.Application,&response:Ens.Response,callrequest:demo.Loan.Msg.Application,callresponse:demo.Loan.Msg.Approval,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'callresponse.%Extends("demo.Loan.Msg.Approval")||'callresponse.IsApproved $$$OK
	Quit:..IsApproved&&(..InterestRate<=callresponse.InterestRate) $$$OK
	Set ..BankName = callresponse.BankName
	Set ..IsApproved = callresponse.IsApproved
	Set ..InterestRate = callresponse.InterestRate
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnComplete">
<FormalSpec><![CDATA[request:demo.Loan.Msg.Application,&response:Ens.Response]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("sync complete")
	#;
	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text = ..GetText()
	Set tSendReply.Destination = request.Destination
	If request.BusinessOperationType="mail" {
		Set tSC=..SendRequestAsync("demo.Loan.FindRateEMailOperation",tSendReply,0)
	} Elseif request.BusinessOperationType="file" {
		Set tSC=..SendRequestAsync("demo.Loan.FindRateFileOperation",tSendReply,0)
	} Elseif request.BusinessOperationType="term" {
		Set tSC=..SendRequestAsync("My Terminal Output",tSendReply,0)
	} Elseif request.BusinessOperationType="msmq" {
		Set tSC=..SendRequestAsync("demo.Loan.FindRateMSMQOperation",tSendReply,0)
	} Elseif request.BusinessOperationType="mqseries" {
		Set tSC=..SendRequestAsync("demo.Loan.FindRateMQSeriesOperation",tSendReply,0)
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnError">
<FormalSpec><![CDATA[request:Ens.Request,&response:Ens.Response,callrequest:Ens.Request,pErrorStatus:%Status,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("received error "_$$$StatusDisplayString(pErrorStatus))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tText=""
	Set tThank = $$FormatMessage^%occMessages(,"Ensdemo","FindRateThankyou","Thank you for applying with FindRate.")
	If ..IsApproved {
		Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateIsApproved1","Your loan application was approved.")_$c(13,10)
		Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateIsApproved2","The lowest interest rate available is at ")_..InterestRate_$$FormatMessage^%occMessages(,"Ensdemo","FindRateOfferedby","% offered by ")_..BankName_"."_$c(13,10)
		Set tText=tText_tThank_$c(13,10)
	} Else {
		Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateIsDenied","Your loan application was denied.")_$c(13,10)
		Set tText=tText_tThank_$c(13,10)
	}
	Quit tText
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>FindRateDecisionProcessDefaultData</DefaultData>
<Data name="FindRateDecisionProcessDefaultData">
<Subscript>"FindRateDecisionProcess"</Subscript>
<Value name="1">
<Value>BankName</Value>
</Value>
<Value name="2">
<Value>InterestRate</Value>
</Value>
<Value name="3">
<Value>IsApproved</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.FindRateEMailOperation">
<Description>
Sends emails based on EMail Adapter config settings and the property values of a demo.Loan.Msg.SendReply request object</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>EMailSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="EMailSendReply">
<Description>
Send an approval email to the applicant</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If pRequest.Destination="" $$$TRACE("no email address.") Quit $$$OK
	$$$TRACE("send email to "_pRequest.Destination)
	Set tMailMessage=##class(%Net.MailMessage).%New()
	Do tMailMessage.To.Insert(pRequest.Destination)
	Set tMailMessage.Subject="RE: Loan Application Approval"
	set tMailMessage.Charset="UTF-8"
	Set tSC=tMailMessage.TextData.Write(pRequest.Text)  Quit:$$$ISERR(tSC) tSC
	Set tSC=..Adapter.SendMail(tMailMessage)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateEMailService">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59278,43007.285</TimeCreated>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.EMail.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pMailMessage:%Net.MailMessage,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("received email from "_pMailMessage.From)

	#; assuming the subject format is LoanApplication:amount:name:TaxID:nationality
	Set tSubject=pMailMessage.Subject

	#; unrecognized mail subject
	If $p(tSubject,":")'="LoanApplication" Quit

	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",2)
	Set tApplication.Name=$p(tSubject,":",3)
	Set tApplication.TaxID=$p(tSubject,":",4)
	Set tApplication.Nationality=$p(tSubject,":",5)
	Set tApplication.BusinessOperationType="mail"
	Set tApplication.Destination=pMailMessage.From
	Set tSC=..SendRequestAsync("demo.Loan.FindRateDecisionProcessCustom",tApplication)  Quit:$$$ISERR(tSC) tSC

	$$$TRACE("record number is "_tApplication.RecordNumber())

	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination=tApplication.Destination
	Set tSC=..SendRequestAsync("demo.Loan.FindRateEMailOperation",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateFileOperation">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>FileSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="FileSendReply">
<Description>
Send an approval to the output file</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("write to file "_pRequest.Destination)
	Set tSC=..Adapter.PutString(pRequest.Destination, pRequest.Text)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateFileService">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59278,43007.285</TimeCreated>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.File.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pFileStream:%FileCharacterStream,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tInputFilename=$tr(pFileStream.Filename,"/","\")
	Set tInputFilename=$p(tInputFilename,"\",$l(tInputFilename,"\"))
	Set tRecordFilename=tInputFilename
	Set $p(tRecordFilename,".",$l(tRecordFilename,"."))="record"
	Set tApprovalFilename=tInputFilename
	Set $p(tApprovalFilename,".",$l(tApprovalFilename,"."))="approval"		
	#;
	$$$TRACE("found file "_tInputFilename)
	#;
	#; assuming the first line is 'amount:name:TaxID:nationality'
	Set tSubject=pFileStream.ReadLine()
	#;
	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="file"
	Set tApplication.Destination=tApprovalFilename
	Set tSC = ..SendRequestAsync("demo.Loan.FindRateDecisionProcessCustom",tApplication)  Quit:$$$ISERR(tSC) tSC
	#;
	$$$TRACE("record number is "_tApplication.RecordNumber())
	#;
	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination=tRecordFilename
	Set tSC=..SendRequestAsync("demo.Loan.FindRateFileOperation",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateMQSeriesOperation">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.MQSeries.OutboundAdapter</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>MQSeriesSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="MQSeriesSendReply">
<Description>
Send an approval to the output message</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("write to mqseries")
	Set tSC=..Adapter.SendMessage(pRequest.Text)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateMQSeriesService">
<Description>
A business service for FindRate using MSMQ adapters</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59389,42703.614649</TimeCreated>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.MQSeries.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
Authors of BusinessService implements this method to receive incoming data</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; assuming the first line is 'amount:name:TaxID:nationality'
	Set tSubject=pInput.Body
	If $IsObject(tSubject) {
		#; The body is a stream
		Set tSubject=tSubject.ReadLine()
	}
	
	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="mqseries"
	Set tApplication.Destination="FindRateResponse"
	Set tSC=..SendRequestAsync("demo.Loan.FindRateDecisionProcessCustom",tApplication)  Quit:$$$ISERR(tSC) tSC

	$$$TRACE("record number is "_tApplication.RecordNumber())

	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination="FindRateResponse"
	Set tSC=..SendRequestAsync("demo.Loan.FindRateMQSeriesOperation",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateMSMQOperation">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.MSMQ.OutboundAdapter</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>MSMQSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="MSMQSendReply">
<Description>
Send an approval to the output message</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("write to msmq "_pRequest.Destination)
	Set tSC=..Adapter.SendMessage(pRequest.Destination, pRequest.Text)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateMSMQService">
<Description>
A business service for FindRate using MSMQ adapters</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59389,42703.614649</TimeCreated>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.MSMQ.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<Description>
Authors of BusinessService implements this method to receive incoming data</Description>
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; assuming the first line is 'amount:name:TaxID:nationality'
	If pInput.BodyLength<32768 {
		#; Access the property directly
		Set tSubject=pInput.Body
	} Else {
		#; We need to access the message via a stream, since it's too large for a single string
		Set tDispatch=pInput.Become("%Activate.IDispatch")
		Set tStream=tDispatch.GetPropertyAsStream("Body")
		Set tSubject=tStream.ReadLine()
	}
	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="msmq"
	Set tApplication.Destination="FindRateResponse"
	Set tSC=..SendRequestAsync("demo.Loan.FindRateDecisionProcessCustom",tApplication)  Quit:$$$ISERR(tSC) tSC

	$$$TRACE("record number is "_tApplication.RecordNumber())
	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination="FindRateResponse"
	Set tSC=..SendRequestAsync("demo.Loan.FindRateMSMQOperation",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateProduction">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59312,56897.717</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="demo.Loan.FindRateProduction" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="demo.Loan.BankMetrics" Category="" ClassName="demo.Loan.BankMetrics" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="CallInterval">5</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateTerminalService" Category="" ClassName="demo.Loan.FindRateTerminalService" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="BusinessPartner">Old School Bank</Setting>
  </Item>
  <Item Name="My Terminal Output" Category="" ClassName="demo.Loan.FindRateTerminalOperation" PoolSize="1" Enabled="true" Foreground="true" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="BusinessPartner">Old School Bank</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateFileService" Category="" ClassName="demo.Loan.FindRateFileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\loan\in</Setting>
    <Setting Target="Adapter" Name="FileSpec">*.application</Setting>
    <Setting Target="Adapter" Name="ArchivePath">C:\Practice\loan\inarchive</Setting>
    <Setting Target="Host" Name="BusinessPartner">LoanTech Corporation</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateFileOperation" Category="" ClassName="demo.Loan.FindRateFileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="FilePath">C:\Practice\loan\out</Setting>
    <Setting Target="Adapter" Name="Overwrite">1</Setting>
    <Setting Target="Host" Name="BusinessPartner">LoanTech Corporation</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateEMailService" Category="" ClassName="demo.Loan.FindRateEMailService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="POP3Server">test.mymailserver.net</Setting>
    <Setting Target="Adapter" Name="Credentials">POP3GetEmailTest</Setting>
    <Setting Target="Host" Name="BusinessPartner">Store Front Loans</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateEMailOperation" Category="" ClassName="demo.Loan.FindRateEMailOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="Credentials">SMTPSendEmailTest</Setting>
    <Setting Target="Adapter" Name="From">loan@FindRate.com</Setting>
    <Setting Target="Adapter" Name="SMTPServer">1.2.3.4</Setting>
    <Setting Target="Host" Name="BusinessPartner">Store Front Loans</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateTCPService" Category="" ClassName="demo.Loan.FindRateTCPService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="JobPerConnection">1</Setting>
    <Setting Target="Adapter" Name="Port">1234</Setting>
    <Setting Target="Adapter" Name="StayConnected">60</Setting>
    <Setting Target="Host" Name="BusinessPartner">LoanQuick, Inc.</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateTCPOperation" Category="" ClassName="demo.Loan.FindRateTCPOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Adapter" Name="IPAddress">!</Setting>
    <Setting Target="Adapter" Name="Port">4321</Setting>
    <Setting Target="Adapter" Name="ResponseTimeout">15</Setting>
    <Setting Target="Adapter" Name="StayConnected">-1</Setting>
    <Setting Target="Adapter" Name="ConnectTimeout">5</Setting>
    <Setting Target="Adapter" Name="ReadTimeout">60</Setting>
    <Setting Target="Host" Name="BusinessPartner">LoanQuick, Inc.</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateCSPService" Category="" ClassName="demo.Loan.FindRateCSPService" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="BusinessPartner">My Loans, Inc.</Setting>
  </Item>
  <Item Name="demo.Loan.WebOperations" Category="" ClassName="demo.Loan.WebOperations" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">10</Setting>
    <Setting Target="Host" Name="BusinessPartner">My Loans, Inc.</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateDecisionProcessCustom" Category="" ClassName="demo.Loan.FindRateDecisionProcessCustom" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateDecisionProcessBPL" Category="" ClassName="demo.Loan.FindRateDecisionProcessBPL" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
  <Item Name="demo.Loan.BankSoprano" Category="" ClassName="demo.Loan.BankSoprano" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
  <Item Name="demo.Loan.BankManana" Category="" ClassName="demo.Loan.BankManana" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
  <Item Name="demo.Loan.BankUS" Category="" ClassName="demo.Loan.BankUS" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateMSMQService" Category="" ClassName="demo.Loan.FindRateMSMQService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="CallInterval">5</Setting>
    <Setting Target="Adapter" Name="CreateQueueIfNeeded">0</Setting>
    <Setting Target="Adapter" Name="QueueLabel">FindRate MSMQ Request Service</Setting>
    <Setting Target="Adapter" Name="QueuePathName">.\private$\FindRate_Request</Setting>
    <Setting Target="Host" Name="BusinessPartner">State Bank</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateMQSeriesService" Category="" ClassName="demo.Loan.FindRateMQSeriesService" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="QueueManager">QM_testperson</Setting>
    <Setting Target="Adapter" Name="Channel">S_testperson/TCP/127.0.0.1(1414)</Setting>
    <Setting Target="Adapter" Name="QueueName">default</Setting>
    <Setting Target="Adapter" Name="QueueOptions">MQOO_INPUT_AS_Q_DEF</Setting>
    <Setting Target="Host" Name="BusinessPartner">Carriers Bank</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateMSMQOperation" Category="" ClassName="demo.Loan.FindRateMSMQOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Adapter" Name="QueueLabel">Find Rate MSMQ Service Response</Setting>
    <Setting Target="Adapter" Name="QueuePathName">.\private$\FindRate_Response</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Host" Name="BusinessPartner">State Bank</Setting>
  </Item>
  <Item Name="demo.Loan.FindRateMQSeriesOperation" Category="" ClassName="demo.Loan.FindRateMQSeriesOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
    <Setting Target="Host" Name="RetryInterval">5</Setting>
    <Setting Target="Host" Name="FailureTimeout">15</Setting>
    <Setting Target="Adapter" Name="QueueManager">QM_testperson</Setting>
    <Setting Target="Adapter" Name="Channel">S_testperson/TCP/127.0.0.1(1414)</Setting>
    <Setting Target="Adapter" Name="QueueName">postcard</Setting>
    <Setting Target="Adapter" Name="QueueOptions">MQOO_OUTPUT</Setting>
    <Setting Target="Host" Name="BusinessPartner">Carriers Bank</Setting>
  </Item>
  <Item Name="demo.Loan.BankEven" Category="" ClassName="demo.Loan.BankEven" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="InactivityTimeout">0</Setting>
  </Item>
</Production>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set tSC=..TestStart()
	If 'tSC Do $system.Status.DisplayError(tSC) Quit

	Set tSC=##class(Ens.Director).CreateBusinessService("demo.Loan.FindRateTerminalService",.tBusinessService)
	If $$$ISERR(tSC) Do $system.OBJ.DisplayError(tSC) Quit
	For {
		Read !,"amount:name:taxid:nationality>",tInput,! Quit:tInput=""
		Set tSC=tBusinessService.ProcessInput(##class(Ens.StringContainer).%New(tInput),.tOutput)
		If 'tSC Do $system.Status.DisplayError(tSC) Continue
		;Write !,tOutput.StringValue
	}
	Set tBusinessService = $$$NULLOREF

	Do ..Stop()
	Quit
]]></Implementation>
</Method>

<Method name="SendRandomData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMode:%String="term",pCount:%Integer=1,pDelay:%Integer=10</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=..TestStart() Quit:$$$ISERR(tSC)

	If pMode="term" {
		Set tSC=##class(Ens.Director).CreateBusinessService("demo.Loan.FindRateTerminalService",.tBS)  Quit:$$$ISERR(tSC)
	} Else { Set tSC=$$$OK }
	For tI=1:1:pCount {
		If tI>1 Hang $random(pDelay+1)

		Set tInput=..RandomRequest()
		Set tMode=pMode If tMode="all" Set tMode=$case($r(4), 0:"term", 1:"file", 2:"tcp", 3:"mail")
		Write !,"Request #",tI,": ",tInput," sent by ",tMode,!

		If tMode="term" {
			If '$Data(tBS) Set tSC=##class(Ens.Director).CreateBusinessService("demo.Loan.FindRateTerminalService",.tBS)  Quit:$$$ISERR(tSC)
			Set tSC=tBS.ProcessInput(##class(Ens.StringContainer).%New(tInput),.tOutput)  Quit:$$$ISERR(tSC)
			Continue
		} Else { Kill tBS }
		If tMode="file" Do $zf(-1,"echo "_tInput_">C:\Practice\loan\in\random_"_$tr($zdt($H,8)," :","_")_".application") continue
		If tMode="tcp"  Do ..SendTCP(tInput,1234) Continue
		If tMode="mail" Do ..SendMail(tInput,$g(^MyEmailAddress)) continue
		If tMode="msmq" Do ..SendMSMQ(tInput,".\private$\FindRate_Request") Continue
		If tMode="mqseries" Do ..SendMQSeries(tInput,"postcard") Continue
	}
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="RandomRequest">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tAmount=($r(1000)+1)*1000
	Set tName=##class(%PopulateUtils).Name()
	Set tTaxID=##class(%PopulateUtils).SSN()
	Set tNationality=$p("USA,USA,UK",",",$r(3)+1)
	Quit tAmount_":"_tName_":"_tTaxID_":"_tNationality
]]></Implementation>
</Method>

<Method name="SendMail">
<ClassMethod>1</ClassMethod>
<FormalSpec>pApplication,pFrom</FormalSpec>
<Implementation><![CDATA[
	Set tSMTP=##class(%Net.SMTP).%New()
	Set tSMTP.smtpserver="192.9.200.1"
	Set tMail=##class(%Net.MailMessage).%New()
	Set tMail.Charset="iso-8859-1"
	Set tMail.From=$g(pFrom)
	Set tMail.Subject="LoanApplication:"_$g(pApplication,"100000:mo_mail:123456789:USA")
	Do tMail.To.Insert("testjsl@intersys.com")
	Do tMail.TextData.Write("The body is not used for the application purposes.")
	Set tSC=tSMTP.Send(tMail) If 'tSC Do $system.OBJ.DisplayError(tSC) Quit
	Write "Loan application is sent successfully.",!
	Quit
]]></Implementation>
</Method>

<Method name="SendMSMQ">
<ClassMethod>1</ClassMethod>
<FormalSpec>pApplication,pQueue</FormalSpec>
<Implementation><![CDATA[
	#; send message through MSMQ
	Set qinfo=##class(Activate.MSMQ.MSMQQueueInfo).%New()
	If qinfo=$$$NULLOREF Write "Failed to create MSMQQueueInfo",! Quit
	Set qinfo.PathName=pQueue
	Set qpub=qinfo.Open(2, 0)
	Set msg=##class(Activate.MSMQ.MSMQMessage).%New()
	Set msg.Label="Loan application:"_pApplication
	Set msg.Body="The body is not used for the application purposes"
	Do msg.Send(qpub)
	Do qpub.Close()
	#; read 2 message back from MSMQ
	Set qinfo=##class(Activate.MSMQ.MSMQQueueInfo).%New()
	If qinfo=$$$NULLOREF Write "Failed to create MSMQQueueInfo",! Quit
	Set qinfo.PathName=$p(pQueue,"_",1)_"_Response"
	;
	Set qpub=qinfo.Open(1, 0)
	Set msg=qpub.Receive(,,,10000)
	Write !,msg.Body,!
	;
	Set qpub=qinfo.Open(1, 0)
	Set msg=qpub.Receive(,,,10000)
	Write msg.Body,!
	Do qpub.Close()
	Quit
]]></Implementation>
</Method>

<Method name="SendMQSeries">
<ClassMethod>1</ClassMethod>
<FormalSpec>pApplication,pQueue</FormalSpec>
<Implementation><![CDATA[
	#; send message through MQ Series
	Set base=##class(EnsLib.MQSeries.Base).%New()
	Set tSC=base.Initialize("QM_dave","S_davem/TCP/127.0.0.1(1414)")
	Set tSC=base.OpenQueue(pQueue,"MQOO_OUTPUT")
	
	#; Construct a message to send
	Set msg=base.CreateMessage(.tSC)
	
	Set msg.Body="Loan application:"_pApplication_$c(13,10)_"The body is not used for the application purposes"
	
	Do base.SendMessage(msg)
	
	Do base.CloseQueue()
	Set base=""
	
	Quit
]]></Implementation>
</Method>

<Method name="SendTCP">
<ClassMethod>1</ClassMethod>
<FormalSpec>pApplication,pPort:%Integer=1234</FormalSpec>
<Implementation><![CDATA[
	Set tDevice="|TCP|"_pPort
	Open tDevice:("127.0.0.1":pPort:"ST"):2
	If $Test=0 Write "can not open TCP device '"_tDevice_"'" Quit
	;
	Use tDevice
	Set pApplication=$g(pApplication,"100000:mo_tcp:123456789:USA")
	;
	Write pApplication_$C(13,10),*-3
	;
	Read tOutput
	;
	Close tDevice
	Write tOutput
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateTCPOperation">
<ClassType/>
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.TCP.TextLineOutboundAdapter</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>TCPSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="TCPSendReply">
<Description>
Send an approval to the output TCP listener</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=..Adapter.SendMessageString(pRequest.Text)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateTCPService">
<Description>
To use this service, telnet to the configured port (default=1234) and enter the application date on a single line, separated by colons.
Example: 10000:Mo:111-22-3333:US
The demo application will copy your receipt notice to the output terminal, and will send the final Approval response there as well.</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59276,57717.364</TimeCreated>

<Parameter name="ADAPTER">
<Description>
Name of the adapter class</Description>
<Default>EnsLib.TCP.TextLineInboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.StringContainer,pOutput:Ens.StringContainer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; assuming the first line is 'amount:name:TaxID:nationality'
	
	#; Just print a prompt if empty input
	If pInput.StringValue="" {
		Set pOutput=##class(Ens.StringContainer).%New("Please apply for a loan as follows - ""Amount:Name:TaxID:Nationality"" (or ""quit"" to quit)")
		Quit $$$OK
	} ElseIf $ZCVT(pInput.StringValue,"L")="quit" {
		$$$sysTRACE("Disconnecting because of client request '"_$E(pInput.StringValue,1,32767-50)_"'")
		Do ..Adapter.Disconnect()
		Quit $$$OK
	}
	$$$TRACE("received line "_pInput.StringValue)

	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tSubject=pInput.StringValue
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="tcp"
	Set tApplication.Destination=""
	Set tSC=..SendRequestAsync("demo.Loan.FindRateDecisionProcessBPL",tApplication)  Quit:$$$ISERR(tSC) tSC

	$$$TRACE("record number is "_tApplication.RecordNumber())
	Set pOutput=##class(Ens.StringContainer).%New(tApplication.GetRecordNumberText())

	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination=""
	Set tSC=..SendRequestAsync("demo.Loan.FindRateTCPOperation",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateTerminalOperation">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59280,43460.487</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="demo.Loan.Msg.SendReply">
<Method>TerminalSendReply</Method>
</MapItem>
]]></Data>
</XData>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ^Ens.Debug("TraceCat",..%ConfigName,"user")=1 ; force user TRACE messages On for this config item (regardless of general trace debug settings)
	Set ^Ens.Debug("TraceCat",..%ConfigName)=0 ; force all other TRACE messages Off for this config item (regardless of general trace debug settings)
	Kill $$$EnsDebug("TraceCat")  Merge $$$EnsDebug("TraceCat")=^Ens.Debug("TraceCat") ; ensure local copy is in sync. Full sync for all jobs will happen when Ens.MonitorService gets around to it
	
	Quit ##super()
]]></Implementation>
</Method>

<Method name="TerminalSendReply">
<Description>
Send an approval message to the applicant's terminal session</Description>
<FormalSpec>pRequest:demo.Loan.Msg.SendReply,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $x'=0 Write !
	For i=1:1:79 Write "=" Write:i=79 !
	Write pRequest.Text
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.FindRateTerminalService">
<Description>
A Business Service called via CreateBusinessService() from the command line prompt offered by the Test() method in class demo.Loan.FindRateProduction</Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59276,57717.364</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.StringContainer,pOutput:Ens.StringContainer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; assuming the first line is 'amount:name:TaxID:nationality'
	Set tSubject=pInput.StringValue

	$$$TRACE("received line "_tSubject)

	Set tApplication = ##class(demo.Loan.Msg.Application).%New()
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="term"
	Set tApplication.Destination=""
	Set tSC=..SendRequestAsync("demo.Loan.FindRateDecisionProcessBPL",tApplication)  Quit:$$$ISERR(tSC) tSC

	$$$TRACE("record number is "_tApplication.RecordNumber())

	Set pOutput=##class(Ens.StringContainer).%New(tApplication.GetRecordNumberText())

	Set tSendReply = ##class(demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination=""
	Set tSC=..SendRequestAsync("My Terminal Output",tSendReply)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="demo.Loan.Msg.Application">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,25915.521</TimeCreated>

<Property name="Amount">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="TaxID">
<Type>%String</Type>
</Property>

<Property name="Nationality">
<Type>%String</Type>
</Property>

<Property name="BusinessOperationType">
<Type>%String</Type>
</Property>

<Property name="Destination">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Parameter name="RESPONSECLASSNAME">
<Default>demo.Loan.Msg.Approval</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>Ensdemo</Default>
</Parameter>

<Method name="RecordNumber">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ..%Id()="" Do ..%Save()
	Quit ..%Id()
]]></Implementation>
</Method>

<Method name="GetRecordNumberText">
<FormalSpec>pFormatAsHTML:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tCRLF=$s(pFormatAsHTML:"<br>",1:$c(13,10))
	Set tText=$$FormatMessage^%occMessages(,"Ensdemo","FindRateReceived","Your loan application has been received, and is being processed.")
	Set tTemp = $$FormatMessage^%occMessages(,"Ensdemo","FindRateRecordNumber","Your record number is %1.",..RecordNumber())
	Set tText=tText_" "_tTemp_tCRLF
	Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateWillReceive","You'll receive a reply from FindRate within 2 business days.")_tCRLF
	Set tText=tText_$$FormatMessage^%occMessages(,"Ensdemo","FindRateThankyou","Thank you for applying with FindRate.")_tCRLF
	Quit tText
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ApplicationDefaultData</DefaultData>
<Data name="ApplicationDefaultData">
<Subscript>"Application"</Subscript>
<Value name="1">
<Value>Amount</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Nationality</Value>
</Value>
<Value name="4">
<Value>TaxID</Value>
</Value>
<Value name="5">
<Value>BusinessOperation</Value>
</Value>
<Value name="6">
<Value>Destination</Value>
</Value>
<Value name="7">
<Value>BusinessOperationType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.Msg.Approval">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Response</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,25915.521</TimeCreated>

<Property name="BankName">
<Type>%String</Type>
</Property>

<Property name="IsApproved">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="InterestRate">
<Type>%Numeric</Type>
</Property>

<Parameter name="DOMAIN">
<Default>Ensdemo</Default>
</Parameter>

<Method name="GetText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSessionId=$$$JobSessionId
	&sql(Select MessageBodyId into :tRecordNum from Ens.MessageHeader where ID=:tSessionId)
	If $Get(tRecordNum)="" set tRecordNum ="??"
	If ..IsApproved {
		Set tText=$$FormatMessage^%occMessages(,"Ensdemo","FindRateIsApproved3","Your loan application with record number %1 was approved at the interest rate of %2 percent.",tRecordNum,..InterestRate)_$c(13,10)
	} Else {
		Set tText=$$FormatMessage^%occMessages(,"Ensdemo","FindRateIsDenied1","Your loan application with record number %1 was denied.",tRecordNum)_$c(13,10)
	}
	Set tThank=$$FormatMessage^%occMessages(,"Ensdemo","FindRateThankyou1","Thank you for applying with %1.",..BankName)
	Quit tText_tThank_$c(13,10)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ApprovalDefaultData</DefaultData>
<Data name="ApprovalDefaultData">
<Subscript>"Approval"</Subscript>
<Value name="1">
<Value>BankName</Value>
</Value>
<Value name="2">
<Value>InterestRate</Value>
</Value>
<Value name="3">
<Value>IsApproved</Value>
</Value>
<Value name="4">
<Value>Destination</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.Msg.CreditRatingRequest">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59296,84933.272</TimeCreated>

<Parameter name="RESPONSECLASSNAME">
<Default>demo.Loan.Msg.CreditRatingResponse</Default>
</Parameter>

<Property name="TaxID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CreditRatingRequestDefaultData</DefaultData>
<Data name="CreditRatingRequestDefaultData">
<Subscript>"CreditRatingRequest"</Subscript>
<Value name="1">
<Value>TaxID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.Msg.CreditRatingResponse">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Response</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59304,56321.684</TimeCreated>

<Property name="TaxID">
<Type>%String</Type>
</Property>

<Property name="CreditRating">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CreditRatingResponseDefaultData</DefaultData>
<Data name="CreditRatingResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"CreditRatingResponse"</Subscript>
<Value name="1">
<Value>CreditRating</Value>
</Value>
<Value name="2">
<Value>TaxID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.Msg.PrimeRateRequest">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59296,84933.272</TimeCreated>

<Parameter name="RESPONSECLASSNAME">
<Default>demo.Loan.Msg.PrimeRateResponse</Default>
</Parameter>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="demo.Loan.Msg.PrimeRateResponse">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Response</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59304,56321.7</TimeCreated>

<Property name="PrimeRate">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PrimeRateResponseDefaultData</DefaultData>
<Data name="PrimeRateResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"PrimeRateResponse"</Subscript>
<Value name="1">
<Value>PrimeRate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="demo.Loan.Msg.SendReply">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59277,25915.521</TimeCreated>

<Property name="Text">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Destination">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ApprovalDefaultData</DefaultData>
<Data name="ApprovalDefaultData">
<Subscript>"Approval"</Subscript>
<Value name="1">
<Value>BankName</Value>
</Value>
<Value name="2">
<Value>InterestRate</Value>
</Value>
<Value name="3">
<Value>IsApproved</Value>
</Value>
<Value name="4">
<Value>Destination</Value>
</Value>
<Value name="5">
<Value>Text</Value>
</Value>
</Data>
</Storage>
</Class>




<Class name="demo.Loan.WebOperations">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64555,38909</TimeChanged>
<TimeCreated>59296,84933.182</TimeCreated>

<Parameter name="INVOCATION">
<Description>
2 modes: Queue, InProc</Description>
<Default>Queue</Default>
</Parameter>

<Parameter name="USEWEBSERVICES">
<Default>no</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
<MapItem MessageType="demo.Loan.Msg.PrimeRateRequest">
<Method>GetPrimeRate</Method>
</MapItem>
<MapItem MessageType="demo.Loan.Msg.CreditRatingRequest">
<Method>GetCreditRating</Method>
</MapItem>
</MapItems>
]]></Data>
</XData>

<Method name="GetPrimeRate">
<FormalSpec>pRequest:demo.Loan.Msg.PrimeRateRequest,*pResponse:demo.Loan.Msg.PrimeRateResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("PrimeRate requested")
	If ..#USEWEBSERVICES="yes" {
		Set tResult = ##class(demo.WebService.FederalReserveClient).GetPrimeRate()
	} Else {
		Set tResult = 3
	}
	Set pResponse = ##class(demo.Loan.Msg.PrimeRateResponse).%New()
	Set pResponse.PrimeRate = tResult
	$$$TRACE("value of '"_tResult_"' returned")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCreditRating">
<FormalSpec>pRequest:demo.Loan.Msg.CreditRatingRequest,*pResponse:demo.Loan.Msg.CreditRatingResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("CreditRating requested for '"_pRequest.TaxID_"'")
	If ..#USEWEBSERVICES="yes" {
		Set tResult = ##class(demo.WebService.CreditBureauClient).GetCreditRating(pRequest.TaxID)
	} Else {
		Set tResult = pRequest.TaxID#10*10
	}
	Set pResponse = ##class(demo.Loan.Msg.CreditRatingResponse).%New()
	Set pResponse.TaxID = pRequest.TaxID
	Set pResponse.CreditRating = tResult
	$$$TRACE("value of '"_tResult_"' returned")
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Project name="Loan" LastModified="2018-02-21 18:44:54.258826">
  <Items>
    <ProjectItem name="demo.Loan" type="PKG"></ProjectItem>
  </Items>
</Project>
</Export>
